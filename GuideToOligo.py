#This script takes a "Guide sequence" generated by CRISPR Design Tool (http://tools.genome-engineering.org)
#and generates the oligos needed for their cloning into a pX-series vector.
#Input variable: sequence_list - Is a list o tuples of strings.
#Each tuple contains the name of the sequence and the sequence.
#For more info check: Ran, F. A. et al. Genome engineering using the CRISPR-Cas9 system. Nat Protoc 8, 2281â€“2308 (2013).

#author: alessio.marcozzi@gmail.com
#version: 1.1
#date: August 2015

#Functions
def check(sequence):
    '''Checks for wrong letter in a DNA sequence.'''
    global BAD_SEQUENCES
    for letter in sequence:
        if letter.upper() not in 'ATCG':
            print("Error! Invalid character found in " + guide_name + ": " + sequence)
            BAD_SEQUENCES.append((guide_name,sequence))
            print(BAD_SEQUENCES)
            return False
    return True      

def reverse(sequence):
    '''Takes a DNA sequence as input.
    Returns its reverse sequence.'''
    reversed_sequence = ''
    for n in range(len(sequence)):
        reversed_sequence += sequence[-(1+n)]
    return reversed_sequence

def complement(sequence):
    '''Takes a DNA sequence as input.
    Returns its complementary sequence.'''
    complementary_sequence = ''
    for base in sequence:
        if base == 'A':
            complementary_sequence += 'T'
        elif base == 'T':
            complementary_sequence += 'A'
        elif base == 'C':
            complementary_sequence += 'G'
        else:
            complementary_sequence += 'C'
    return complementary_sequence

def reverseComplement(sequence):
    '''Takes a DNA sequence as input.
    Returns its reverse and complementary (antiparallel) sequence.'''
    reverse_complement = ''
    n = len(sequence)-1
    while n >= 0:
        if sequence[n] == 'A':
            reverse_complement += 'T'
        elif sequence[n] == 'T':
            reverse_complement += 'A'
        elif sequence[n] == 'C':
            reverse_complement += 'G'
        else:
            reverse_complement += 'C'
        n -= 1
    return reverse_complement

def output(sequence, guide_name):
    '''Prints a human readable output.'''
    fd = forward_extra + sequence
    rv = complement('G' + sequence) + reverse_extra
    print()
    print("Oligos design for", guide_name)
    print()
    print("Annealing view")
    print("5'-", fd, "-3'")
    print("       ", "*||||||||||||||||||||")
    print("   ", "3'-", rv, "-5'")
    print()
    print("Oligos to order (5'-3' orientation)")
    print(guide_name + "-F:", fd)
    print(guide_name + "-R:", reverse(rv))
    print()


#Variables
BAD_SEQUENCES = []
forward_extra = 'CACCG' # 5'-CACCG-3' BbsI + G
reverse_extra = 'CAAA' # 3'-CAAA-5' BbsI
sequence_list = [('t(3;X)Chr3_G1','CAGGGGTGCCACCTAATCAG'),
                 ('t(3;X)Chr3_G2','GCACATCCCCTCTGATTAGG'),
                 ('t(3;X)Chr3_G3','CCAGGTGCTGAAGAGTACTC'),
                 ('t(3;X)Chr3_G4','GGGGTGCCACCTAATCAGAG'),
                 ('t(3;X)ChrX_G1','CACCTAGACGAACCCTACGT'),
                 ('t(3;X)ChrX_G2','ACACCTAGACGAACCCTACG'),
                 ('t(3;X)ChrX_G3','GGTTAGGTCTGACCCACGTA'),
                 ('t(3;X)ChrX_G4','GACCCACGTAGGGTTCGTCT')]


#Body
for item in sequence_list:
    guide_name = item[0]
    sequence = item[1]
    if check(sequence) == True:
        output(sequence, guide_name)


#Errors tracking
if len(BAD_SEQUENCES) > 0:
    print("WARNING! An error occurred...")
    print("Please check the followin sequence(s)")
    print(bad_sequences)